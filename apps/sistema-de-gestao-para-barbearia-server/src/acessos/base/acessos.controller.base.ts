/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AcessosService } from "../acessos.service";
import { AcessosCreateInput } from "./AcessosCreateInput";
import { Acessos } from "./Acessos";
import { AcessosFindManyArgs } from "./AcessosFindManyArgs";
import { AcessosWhereUniqueInput } from "./AcessosWhereUniqueInput";
import { AcessosUpdateInput } from "./AcessosUpdateInput";

export class AcessosControllerBase {
  constructor(protected readonly service: AcessosService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Acessos })
  async createAcessos(
    @common.Body() data: AcessosCreateInput
  ): Promise<Acessos> {
    return await this.service.createAcessos({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Acessos] })
  @ApiNestedQuery(AcessosFindManyArgs)
  async acessosItems(@common.Req() request: Request): Promise<Acessos[]> {
    const args = plainToClass(AcessosFindManyArgs, request.query);
    return this.service.acessosItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Acessos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async acessos(
    @common.Param() params: AcessosWhereUniqueInput
  ): Promise<Acessos | null> {
    const result = await this.service.acessos({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Acessos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAcessos(
    @common.Param() params: AcessosWhereUniqueInput,
    @common.Body() data: AcessosUpdateInput
  ): Promise<Acessos | null> {
    try {
      return await this.service.updateAcessos({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Acessos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAcessos(
    @common.Param() params: AcessosWhereUniqueInput
  ): Promise<Acessos | null> {
    try {
      return await this.service.deleteAcessos({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
