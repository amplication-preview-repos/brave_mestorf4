/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TransacoesService } from "../transacoes.service";
import { TransacoesCreateInput } from "./TransacoesCreateInput";
import { Transacoes } from "./Transacoes";
import { TransacoesFindManyArgs } from "./TransacoesFindManyArgs";
import { TransacoesWhereUniqueInput } from "./TransacoesWhereUniqueInput";
import { TransacoesUpdateInput } from "./TransacoesUpdateInput";

export class TransacoesControllerBase {
  constructor(protected readonly service: TransacoesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Transacoes })
  async createTransacoes(
    @common.Body() data: TransacoesCreateInput
  ): Promise<Transacoes> {
    return await this.service.createTransacoes({
      data: {
        ...data,

        cliente: data.cliente
          ? {
              connect: data.cliente,
            }
          : undefined,
      },
      select: {
        cliente: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dataHora: true,
        id: true,
        itemVendido: true,
        metodoPagamento: true,
        updatedAt: true,
        valor: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Transacoes] })
  @ApiNestedQuery(TransacoesFindManyArgs)
  async transacoesItems(@common.Req() request: Request): Promise<Transacoes[]> {
    const args = plainToClass(TransacoesFindManyArgs, request.query);
    return this.service.transacoesItems({
      ...args,
      select: {
        cliente: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dataHora: true,
        id: true,
        itemVendido: true,
        metodoPagamento: true,
        updatedAt: true,
        valor: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Transacoes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async transacoes(
    @common.Param() params: TransacoesWhereUniqueInput
  ): Promise<Transacoes | null> {
    const result = await this.service.transacoes({
      where: params,
      select: {
        cliente: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dataHora: true,
        id: true,
        itemVendido: true,
        metodoPagamento: true,
        updatedAt: true,
        valor: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Transacoes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTransacoes(
    @common.Param() params: TransacoesWhereUniqueInput,
    @common.Body() data: TransacoesUpdateInput
  ): Promise<Transacoes | null> {
    try {
      return await this.service.updateTransacoes({
        where: params,
        data: {
          ...data,

          cliente: data.cliente
            ? {
                connect: data.cliente,
              }
            : undefined,
        },
        select: {
          cliente: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          dataHora: true,
          id: true,
          itemVendido: true,
          metodoPagamento: true,
          updatedAt: true,
          valor: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Transacoes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTransacoes(
    @common.Param() params: TransacoesWhereUniqueInput
  ): Promise<Transacoes | null> {
    try {
      return await this.service.deleteTransacoes({
        where: params,
        select: {
          cliente: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          dataHora: true,
          id: true,
          itemVendido: true,
          metodoPagamento: true,
          updatedAt: true,
          valor: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
