/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Transacoes } from "./Transacoes";
import { TransacoesCountArgs } from "./TransacoesCountArgs";
import { TransacoesFindManyArgs } from "./TransacoesFindManyArgs";
import { TransacoesFindUniqueArgs } from "./TransacoesFindUniqueArgs";
import { CreateTransacoesArgs } from "./CreateTransacoesArgs";
import { UpdateTransacoesArgs } from "./UpdateTransacoesArgs";
import { DeleteTransacoesArgs } from "./DeleteTransacoesArgs";
import { Clientes } from "../../clientes/base/Clientes";
import { TransacoesService } from "../transacoes.service";
@graphql.Resolver(() => Transacoes)
export class TransacoesResolverBase {
  constructor(protected readonly service: TransacoesService) {}

  async _transacoesItemsMeta(
    @graphql.Args() args: TransacoesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Transacoes])
  async transacoesItems(
    @graphql.Args() args: TransacoesFindManyArgs
  ): Promise<Transacoes[]> {
    return this.service.transacoesItems(args);
  }

  @graphql.Query(() => Transacoes, { nullable: true })
  async transacoes(
    @graphql.Args() args: TransacoesFindUniqueArgs
  ): Promise<Transacoes | null> {
    const result = await this.service.transacoes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Transacoes)
  async createTransacoes(
    @graphql.Args() args: CreateTransacoesArgs
  ): Promise<Transacoes> {
    return await this.service.createTransacoes({
      ...args,
      data: {
        ...args.data,

        cliente: args.data.cliente
          ? {
              connect: args.data.cliente,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Transacoes)
  async updateTransacoes(
    @graphql.Args() args: UpdateTransacoesArgs
  ): Promise<Transacoes | null> {
    try {
      return await this.service.updateTransacoes({
        ...args,
        data: {
          ...args.data,

          cliente: args.data.cliente
            ? {
                connect: args.data.cliente,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Transacoes)
  async deleteTransacoes(
    @graphql.Args() args: DeleteTransacoesArgs
  ): Promise<Transacoes | null> {
    try {
      return await this.service.deleteTransacoes(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Clientes, {
    nullable: true,
    name: "cliente",
  })
  async getCliente(
    @graphql.Parent() parent: Transacoes
  ): Promise<Clientes | null> {
    const result = await this.service.getCliente(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
