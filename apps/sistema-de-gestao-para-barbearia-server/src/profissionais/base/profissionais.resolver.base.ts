/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Profissionais } from "./Profissionais";
import { ProfissionaisCountArgs } from "./ProfissionaisCountArgs";
import { ProfissionaisFindManyArgs } from "./ProfissionaisFindManyArgs";
import { ProfissionaisFindUniqueArgs } from "./ProfissionaisFindUniqueArgs";
import { CreateProfissionaisArgs } from "./CreateProfissionaisArgs";
import { UpdateProfissionaisArgs } from "./UpdateProfissionaisArgs";
import { DeleteProfissionaisArgs } from "./DeleteProfissionaisArgs";
import { ProfissionaisService } from "../profissionais.service";
@graphql.Resolver(() => Profissionais)
export class ProfissionaisResolverBase {
  constructor(protected readonly service: ProfissionaisService) {}

  async _profissionaisItemsMeta(
    @graphql.Args() args: ProfissionaisCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Profissionais])
  async profissionaisItems(
    @graphql.Args() args: ProfissionaisFindManyArgs
  ): Promise<Profissionais[]> {
    return this.service.profissionaisItems(args);
  }

  @graphql.Query(() => Profissionais, { nullable: true })
  async profissionais(
    @graphql.Args() args: ProfissionaisFindUniqueArgs
  ): Promise<Profissionais | null> {
    const result = await this.service.profissionais(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Profissionais)
  async createProfissionais(
    @graphql.Args() args: CreateProfissionaisArgs
  ): Promise<Profissionais> {
    return await this.service.createProfissionais({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Profissionais)
  async updateProfissionais(
    @graphql.Args() args: UpdateProfissionaisArgs
  ): Promise<Profissionais | null> {
    try {
      return await this.service.updateProfissionais({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Profissionais)
  async deleteProfissionais(
    @graphql.Args() args: DeleteProfissionaisArgs
  ): Promise<Profissionais | null> {
    try {
      return await this.service.deleteProfissionais(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
