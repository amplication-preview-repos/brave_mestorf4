/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProfissionaisService } from "../profissionais.service";
import { ProfissionaisCreateInput } from "./ProfissionaisCreateInput";
import { Profissionais } from "./Profissionais";
import { ProfissionaisFindManyArgs } from "./ProfissionaisFindManyArgs";
import { ProfissionaisWhereUniqueInput } from "./ProfissionaisWhereUniqueInput";
import { ProfissionaisUpdateInput } from "./ProfissionaisUpdateInput";

export class ProfissionaisControllerBase {
  constructor(protected readonly service: ProfissionaisService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Profissionais })
  async createProfissionais(
    @common.Body() data: ProfissionaisCreateInput
  ): Promise<Profissionais> {
    return await this.service.createProfissionais({
      data: data,
      select: {
        createdAt: true,
        email: true,
        especialidade: true,
        id: true,
        nome: true,
        telefone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Profissionais] })
  @ApiNestedQuery(ProfissionaisFindManyArgs)
  async profissionaisItems(
    @common.Req() request: Request
  ): Promise<Profissionais[]> {
    const args = plainToClass(ProfissionaisFindManyArgs, request.query);
    return this.service.profissionaisItems({
      ...args,
      select: {
        createdAt: true,
        email: true,
        especialidade: true,
        id: true,
        nome: true,
        telefone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Profissionais })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async profissionais(
    @common.Param() params: ProfissionaisWhereUniqueInput
  ): Promise<Profissionais | null> {
    const result = await this.service.profissionais({
      where: params,
      select: {
        createdAt: true,
        email: true,
        especialidade: true,
        id: true,
        nome: true,
        telefone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Profissionais })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProfissionais(
    @common.Param() params: ProfissionaisWhereUniqueInput,
    @common.Body() data: ProfissionaisUpdateInput
  ): Promise<Profissionais | null> {
    try {
      return await this.service.updateProfissionais({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          especialidade: true,
          id: true,
          nome: true,
          telefone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Profissionais })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProfissionais(
    @common.Param() params: ProfissionaisWhereUniqueInput
  ): Promise<Profissionais | null> {
    try {
      return await this.service.deleteProfissionais({
        where: params,
        select: {
          createdAt: true,
          email: true,
          especialidade: true,
          id: true,
          nome: true,
          telefone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
