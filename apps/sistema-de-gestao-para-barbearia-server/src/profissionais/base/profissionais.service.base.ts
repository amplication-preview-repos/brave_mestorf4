/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Profissionais as PrismaProfissionais } from "@prisma/client";

export class ProfissionaisServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProfissionaisCountArgs, "select">
  ): Promise<number> {
    return this.prisma.profissionais.count(args);
  }

  async profissionaisItems(
    args: Prisma.ProfissionaisFindManyArgs
  ): Promise<PrismaProfissionais[]> {
    return this.prisma.profissionais.findMany(args);
  }
  async profissionais(
    args: Prisma.ProfissionaisFindUniqueArgs
  ): Promise<PrismaProfissionais | null> {
    return this.prisma.profissionais.findUnique(args);
  }
  async createProfissionais(
    args: Prisma.ProfissionaisCreateArgs
  ): Promise<PrismaProfissionais> {
    return this.prisma.profissionais.create(args);
  }
  async updateProfissionais(
    args: Prisma.ProfissionaisUpdateArgs
  ): Promise<PrismaProfissionais> {
    return this.prisma.profissionais.update(args);
  }
  async deleteProfissionais(
    args: Prisma.ProfissionaisDeleteArgs
  ): Promise<PrismaProfissionais> {
    return this.prisma.profissionais.delete(args);
  }
}
