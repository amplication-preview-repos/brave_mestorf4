/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServicosService } from "../servicos.service";
import { ServicosCreateInput } from "./ServicosCreateInput";
import { Servicos } from "./Servicos";
import { ServicosFindManyArgs } from "./ServicosFindManyArgs";
import { ServicosWhereUniqueInput } from "./ServicosWhereUniqueInput";
import { ServicosUpdateInput } from "./ServicosUpdateInput";
import { AgendamentosFindManyArgs } from "../../agendamentos/base/AgendamentosFindManyArgs";
import { Agendamentos } from "../../agendamentos/base/Agendamentos";
import { AgendamentosWhereUniqueInput } from "../../agendamentos/base/AgendamentosWhereUniqueInput";

export class ServicosControllerBase {
  constructor(protected readonly service: ServicosService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Servicos })
  async createServicos(
    @common.Body() data: ServicosCreateInput
  ): Promise<Servicos> {
    return await this.service.createServicos({
      data: data,
      select: {
        createdAt: true,
        descricao: true,
        id: true,
        nome: true,
        preco: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Servicos] })
  @ApiNestedQuery(ServicosFindManyArgs)
  async servicosItems(@common.Req() request: Request): Promise<Servicos[]> {
    const args = plainToClass(ServicosFindManyArgs, request.query);
    return this.service.servicosItems({
      ...args,
      select: {
        createdAt: true,
        descricao: true,
        id: true,
        nome: true,
        preco: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Servicos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async servicos(
    @common.Param() params: ServicosWhereUniqueInput
  ): Promise<Servicos | null> {
    const result = await this.service.servicos({
      where: params,
      select: {
        createdAt: true,
        descricao: true,
        id: true,
        nome: true,
        preco: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Servicos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServicos(
    @common.Param() params: ServicosWhereUniqueInput,
    @common.Body() data: ServicosUpdateInput
  ): Promise<Servicos | null> {
    try {
      return await this.service.updateServicos({
        where: params,
        data: data,
        select: {
          createdAt: true,
          descricao: true,
          id: true,
          nome: true,
          preco: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Servicos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServicos(
    @common.Param() params: ServicosWhereUniqueInput
  ): Promise<Servicos | null> {
    try {
      return await this.service.deleteServicos({
        where: params,
        select: {
          createdAt: true,
          descricao: true,
          id: true,
          nome: true,
          preco: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/agendamentosItems")
  @ApiNestedQuery(AgendamentosFindManyArgs)
  async findAgendamentosItems(
    @common.Req() request: Request,
    @common.Param() params: ServicosWhereUniqueInput
  ): Promise<Agendamentos[]> {
    const query = plainToClass(AgendamentosFindManyArgs, request.query);
    const results = await this.service.findAgendamentosItems(params.id, {
      ...query,
      select: {
        cliente: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dataHora: true,
        duracao: true,
        id: true,

        servico: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/agendamentosItems")
  async connectAgendamentosItems(
    @common.Param() params: ServicosWhereUniqueInput,
    @common.Body() body: AgendamentosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agendamentosItems: {
        connect: body,
      },
    };
    await this.service.updateServicos({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/agendamentosItems")
  async updateAgendamentosItems(
    @common.Param() params: ServicosWhereUniqueInput,
    @common.Body() body: AgendamentosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agendamentosItems: {
        set: body,
      },
    };
    await this.service.updateServicos({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/agendamentosItems")
  async disconnectAgendamentosItems(
    @common.Param() params: ServicosWhereUniqueInput,
    @common.Body() body: AgendamentosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agendamentosItems: {
        disconnect: body,
      },
    };
    await this.service.updateServicos({
      where: params,
      data,
      select: { id: true },
    });
  }
}
