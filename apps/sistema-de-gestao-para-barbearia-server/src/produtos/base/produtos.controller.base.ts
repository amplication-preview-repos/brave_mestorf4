/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProdutosService } from "../produtos.service";
import { ProdutosCreateInput } from "./ProdutosCreateInput";
import { Produtos } from "./Produtos";
import { ProdutosFindManyArgs } from "./ProdutosFindManyArgs";
import { ProdutosWhereUniqueInput } from "./ProdutosWhereUniqueInput";
import { ProdutosUpdateInput } from "./ProdutosUpdateInput";

export class ProdutosControllerBase {
  constructor(protected readonly service: ProdutosService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Produtos })
  async createProdutos(
    @common.Body() data: ProdutosCreateInput
  ): Promise<Produtos> {
    return await this.service.createProdutos({
      data: data,
      select: {
        createdAt: true,
        descricao: true,
        estoque: true,
        id: true,
        nome: true,
        preco: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Produtos] })
  @ApiNestedQuery(ProdutosFindManyArgs)
  async produtosItems(@common.Req() request: Request): Promise<Produtos[]> {
    const args = plainToClass(ProdutosFindManyArgs, request.query);
    return this.service.produtosItems({
      ...args,
      select: {
        createdAt: true,
        descricao: true,
        estoque: true,
        id: true,
        nome: true,
        preco: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Produtos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async produtos(
    @common.Param() params: ProdutosWhereUniqueInput
  ): Promise<Produtos | null> {
    const result = await this.service.produtos({
      where: params,
      select: {
        createdAt: true,
        descricao: true,
        estoque: true,
        id: true,
        nome: true,
        preco: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Produtos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProdutos(
    @common.Param() params: ProdutosWhereUniqueInput,
    @common.Body() data: ProdutosUpdateInput
  ): Promise<Produtos | null> {
    try {
      return await this.service.updateProdutos({
        where: params,
        data: data,
        select: {
          createdAt: true,
          descricao: true,
          estoque: true,
          id: true,
          nome: true,
          preco: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Produtos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProdutos(
    @common.Param() params: ProdutosWhereUniqueInput
  ): Promise<Produtos | null> {
    try {
      return await this.service.deleteProdutos({
        where: params,
        select: {
          createdAt: true,
          descricao: true,
          estoque: true,
          id: true,
          nome: true,
          preco: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
