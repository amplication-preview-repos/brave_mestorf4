/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DisponibilidadeProfissionais } from "./DisponibilidadeProfissionais";
import { DisponibilidadeProfissionaisCountArgs } from "./DisponibilidadeProfissionaisCountArgs";
import { DisponibilidadeProfissionaisFindManyArgs } from "./DisponibilidadeProfissionaisFindManyArgs";
import { DisponibilidadeProfissionaisFindUniqueArgs } from "./DisponibilidadeProfissionaisFindUniqueArgs";
import { CreateDisponibilidadeProfissionaisArgs } from "./CreateDisponibilidadeProfissionaisArgs";
import { UpdateDisponibilidadeProfissionaisArgs } from "./UpdateDisponibilidadeProfissionaisArgs";
import { DeleteDisponibilidadeProfissionaisArgs } from "./DeleteDisponibilidadeProfissionaisArgs";
import { DisponibilidadeProfissionaisService } from "../disponibilidadeProfissionais.service";
@graphql.Resolver(() => DisponibilidadeProfissionais)
export class DisponibilidadeProfissionaisResolverBase {
  constructor(
    protected readonly service: DisponibilidadeProfissionaisService
  ) {}

  async _disponibilidadeProfissionaisItemsMeta(
    @graphql.Args() args: DisponibilidadeProfissionaisCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DisponibilidadeProfissionais])
  async disponibilidadeProfissionaisItems(
    @graphql.Args() args: DisponibilidadeProfissionaisFindManyArgs
  ): Promise<DisponibilidadeProfissionais[]> {
    return this.service.disponibilidadeProfissionaisItems(args);
  }

  @graphql.Query(() => DisponibilidadeProfissionais, { nullable: true })
  async disponibilidadeProfissionais(
    @graphql.Args() args: DisponibilidadeProfissionaisFindUniqueArgs
  ): Promise<DisponibilidadeProfissionais | null> {
    const result = await this.service.disponibilidadeProfissionais(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DisponibilidadeProfissionais)
  async createDisponibilidadeProfissionais(
    @graphql.Args() args: CreateDisponibilidadeProfissionaisArgs
  ): Promise<DisponibilidadeProfissionais> {
    return await this.service.createDisponibilidadeProfissionais({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DisponibilidadeProfissionais)
  async updateDisponibilidadeProfissionais(
    @graphql.Args() args: UpdateDisponibilidadeProfissionaisArgs
  ): Promise<DisponibilidadeProfissionais | null> {
    try {
      return await this.service.updateDisponibilidadeProfissionais({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DisponibilidadeProfissionais)
  async deleteDisponibilidadeProfissionais(
    @graphql.Args() args: DeleteDisponibilidadeProfissionaisArgs
  ): Promise<DisponibilidadeProfissionais | null> {
    try {
      return await this.service.deleteDisponibilidadeProfissionais(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
