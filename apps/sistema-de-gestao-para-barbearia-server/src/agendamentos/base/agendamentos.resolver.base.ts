/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Agendamentos } from "./Agendamentos";
import { AgendamentosCountArgs } from "./AgendamentosCountArgs";
import { AgendamentosFindManyArgs } from "./AgendamentosFindManyArgs";
import { AgendamentosFindUniqueArgs } from "./AgendamentosFindUniqueArgs";
import { CreateAgendamentosArgs } from "./CreateAgendamentosArgs";
import { UpdateAgendamentosArgs } from "./UpdateAgendamentosArgs";
import { DeleteAgendamentosArgs } from "./DeleteAgendamentosArgs";
import { Clientes } from "../../clientes/base/Clientes";
import { Servicos } from "../../servicos/base/Servicos";
import { AgendamentosService } from "../agendamentos.service";
@graphql.Resolver(() => Agendamentos)
export class AgendamentosResolverBase {
  constructor(protected readonly service: AgendamentosService) {}

  async _agendamentosItemsMeta(
    @graphql.Args() args: AgendamentosCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Agendamentos])
  async agendamentosItems(
    @graphql.Args() args: AgendamentosFindManyArgs
  ): Promise<Agendamentos[]> {
    return this.service.agendamentosItems(args);
  }

  @graphql.Query(() => Agendamentos, { nullable: true })
  async agendamentos(
    @graphql.Args() args: AgendamentosFindUniqueArgs
  ): Promise<Agendamentos | null> {
    const result = await this.service.agendamentos(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Agendamentos)
  async createAgendamentos(
    @graphql.Args() args: CreateAgendamentosArgs
  ): Promise<Agendamentos> {
    return await this.service.createAgendamentos({
      ...args,
      data: {
        ...args.data,

        cliente: args.data.cliente
          ? {
              connect: args.data.cliente,
            }
          : undefined,

        servico: args.data.servico
          ? {
              connect: args.data.servico,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Agendamentos)
  async updateAgendamentos(
    @graphql.Args() args: UpdateAgendamentosArgs
  ): Promise<Agendamentos | null> {
    try {
      return await this.service.updateAgendamentos({
        ...args,
        data: {
          ...args.data,

          cliente: args.data.cliente
            ? {
                connect: args.data.cliente,
              }
            : undefined,

          servico: args.data.servico
            ? {
                connect: args.data.servico,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Agendamentos)
  async deleteAgendamentos(
    @graphql.Args() args: DeleteAgendamentosArgs
  ): Promise<Agendamentos | null> {
    try {
      return await this.service.deleteAgendamentos(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Clientes, {
    nullable: true,
    name: "cliente",
  })
  async getCliente(
    @graphql.Parent() parent: Agendamentos
  ): Promise<Clientes | null> {
    const result = await this.service.getCliente(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Servicos, {
    nullable: true,
    name: "servico",
  })
  async getServico(
    @graphql.Parent() parent: Agendamentos
  ): Promise<Servicos | null> {
    const result = await this.service.getServico(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
