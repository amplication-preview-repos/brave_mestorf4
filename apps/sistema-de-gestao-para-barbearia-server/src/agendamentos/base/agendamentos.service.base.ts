/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Agendamentos as PrismaAgendamentos } from "@prisma/client";

export class AgendamentosServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AgendamentosCountArgs, "select">
  ): Promise<number> {
    return this.prisma.agendamentos.count(args);
  }

  async agendamentosItems(
    args: Prisma.AgendamentosFindManyArgs
  ): Promise<PrismaAgendamentos[]> {
    return this.prisma.agendamentos.findMany(args);
  }
  async agendamentos(
    args: Prisma.AgendamentosFindUniqueArgs
  ): Promise<PrismaAgendamentos | null> {
    return this.prisma.agendamentos.findUnique(args);
  }
  async createAgendamentos(
    args: Prisma.AgendamentosCreateArgs
  ): Promise<PrismaAgendamentos> {
    return this.prisma.agendamentos.create(args);
  }
  async updateAgendamentos(
    args: Prisma.AgendamentosUpdateArgs
  ): Promise<PrismaAgendamentos> {
    return this.prisma.agendamentos.update(args);
  }
  async deleteAgendamentos(
    args: Prisma.AgendamentosDeleteArgs
  ): Promise<PrismaAgendamentos> {
    return this.prisma.agendamentos.delete(args);
  }
}
