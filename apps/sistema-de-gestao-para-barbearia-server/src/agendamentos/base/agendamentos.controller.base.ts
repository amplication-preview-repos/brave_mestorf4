/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AgendamentosService } from "../agendamentos.service";
import { AgendamentosCreateInput } from "./AgendamentosCreateInput";
import { Agendamentos } from "./Agendamentos";
import { AgendamentosFindManyArgs } from "./AgendamentosFindManyArgs";
import { AgendamentosWhereUniqueInput } from "./AgendamentosWhereUniqueInput";
import { AgendamentosUpdateInput } from "./AgendamentosUpdateInput";

export class AgendamentosControllerBase {
  constructor(protected readonly service: AgendamentosService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Agendamentos })
  async createAgendamentos(
    @common.Body() data: AgendamentosCreateInput
  ): Promise<Agendamentos> {
    return await this.service.createAgendamentos({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Agendamentos] })
  @ApiNestedQuery(AgendamentosFindManyArgs)
  async agendamentosItems(
    @common.Req() request: Request
  ): Promise<Agendamentos[]> {
    const args = plainToClass(AgendamentosFindManyArgs, request.query);
    return this.service.agendamentosItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Agendamentos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async agendamentos(
    @common.Param() params: AgendamentosWhereUniqueInput
  ): Promise<Agendamentos | null> {
    const result = await this.service.agendamentos({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Agendamentos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAgendamentos(
    @common.Param() params: AgendamentosWhereUniqueInput,
    @common.Body() data: AgendamentosUpdateInput
  ): Promise<Agendamentos | null> {
    try {
      return await this.service.updateAgendamentos({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Agendamentos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAgendamentos(
    @common.Param() params: AgendamentosWhereUniqueInput
  ): Promise<Agendamentos | null> {
    try {
      return await this.service.deleteAgendamentos({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
