/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MensagensService } from "../mensagens.service";
import { MensagensCreateInput } from "./MensagensCreateInput";
import { Mensagens } from "./Mensagens";
import { MensagensFindManyArgs } from "./MensagensFindManyArgs";
import { MensagensWhereUniqueInput } from "./MensagensWhereUniqueInput";
import { MensagensUpdateInput } from "./MensagensUpdateInput";

export class MensagensControllerBase {
  constructor(protected readonly service: MensagensService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Mensagens })
  async createMensagens(
    @common.Body() data: MensagensCreateInput
  ): Promise<Mensagens> {
    return await this.service.createMensagens({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Mensagens] })
  @ApiNestedQuery(MensagensFindManyArgs)
  async mensagensItems(@common.Req() request: Request): Promise<Mensagens[]> {
    const args = plainToClass(MensagensFindManyArgs, request.query);
    return this.service.mensagensItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Mensagens })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mensagens(
    @common.Param() params: MensagensWhereUniqueInput
  ): Promise<Mensagens | null> {
    const result = await this.service.mensagens({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Mensagens })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMensagens(
    @common.Param() params: MensagensWhereUniqueInput,
    @common.Body() data: MensagensUpdateInput
  ): Promise<Mensagens | null> {
    try {
      return await this.service.updateMensagens({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Mensagens })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMensagens(
    @common.Param() params: MensagensWhereUniqueInput
  ): Promise<Mensagens | null> {
    try {
      return await this.service.deleteMensagens({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
