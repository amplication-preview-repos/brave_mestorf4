/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Mensagens } from "./Mensagens";
import { MensagensCountArgs } from "./MensagensCountArgs";
import { MensagensFindManyArgs } from "./MensagensFindManyArgs";
import { MensagensFindUniqueArgs } from "./MensagensFindUniqueArgs";
import { DeleteMensagensArgs } from "./DeleteMensagensArgs";
import { MensagensService } from "../mensagens.service";
@graphql.Resolver(() => Mensagens)
export class MensagensResolverBase {
  constructor(protected readonly service: MensagensService) {}

  async _mensagensItemsMeta(
    @graphql.Args() args: MensagensCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Mensagens])
  async mensagensItems(
    @graphql.Args() args: MensagensFindManyArgs
  ): Promise<Mensagens[]> {
    return this.service.mensagensItems(args);
  }

  @graphql.Query(() => Mensagens, { nullable: true })
  async mensagens(
    @graphql.Args() args: MensagensFindUniqueArgs
  ): Promise<Mensagens | null> {
    const result = await this.service.mensagens(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Mensagens)
  async deleteMensagens(
    @graphql.Args() args: DeleteMensagensArgs
  ): Promise<Mensagens | null> {
    try {
      return await this.service.deleteMensagens(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
