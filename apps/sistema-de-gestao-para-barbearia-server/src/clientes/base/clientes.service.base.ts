/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Clientes as PrismaClientes } from "@prisma/client";

export class ClientesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ClientesCountArgs, "select">): Promise<number> {
    return this.prisma.clientes.count(args);
  }

  async clientesItems(
    args: Prisma.ClientesFindManyArgs
  ): Promise<PrismaClientes[]> {
    return this.prisma.clientes.findMany(args);
  }
  async clientes(
    args: Prisma.ClientesFindUniqueArgs
  ): Promise<PrismaClientes | null> {
    return this.prisma.clientes.findUnique(args);
  }
  async createClientes(
    args: Prisma.ClientesCreateArgs
  ): Promise<PrismaClientes> {
    return this.prisma.clientes.create(args);
  }
  async updateClientes(
    args: Prisma.ClientesUpdateArgs
  ): Promise<PrismaClientes> {
    return this.prisma.clientes.update(args);
  }
  async deleteClientes(
    args: Prisma.ClientesDeleteArgs
  ): Promise<PrismaClientes> {
    return this.prisma.clientes.delete(args);
  }
}
