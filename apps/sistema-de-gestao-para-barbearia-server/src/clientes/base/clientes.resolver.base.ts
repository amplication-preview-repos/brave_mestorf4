/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Clientes } from "./Clientes";
import { ClientesCountArgs } from "./ClientesCountArgs";
import { ClientesFindManyArgs } from "./ClientesFindManyArgs";
import { ClientesFindUniqueArgs } from "./ClientesFindUniqueArgs";
import { CreateClientesArgs } from "./CreateClientesArgs";
import { UpdateClientesArgs } from "./UpdateClientesArgs";
import { DeleteClientesArgs } from "./DeleteClientesArgs";
import { ClientesService } from "../clientes.service";
@graphql.Resolver(() => Clientes)
export class ClientesResolverBase {
  constructor(protected readonly service: ClientesService) {}

  async _clientesItemsMeta(
    @graphql.Args() args: ClientesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Clientes])
  async clientesItems(
    @graphql.Args() args: ClientesFindManyArgs
  ): Promise<Clientes[]> {
    return this.service.clientesItems(args);
  }

  @graphql.Query(() => Clientes, { nullable: true })
  async clientes(
    @graphql.Args() args: ClientesFindUniqueArgs
  ): Promise<Clientes | null> {
    const result = await this.service.clientes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Clientes)
  async createClientes(
    @graphql.Args() args: CreateClientesArgs
  ): Promise<Clientes> {
    return await this.service.createClientes({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Clientes)
  async updateClientes(
    @graphql.Args() args: UpdateClientesArgs
  ): Promise<Clientes | null> {
    try {
      return await this.service.updateClientes({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Clientes)
  async deleteClientes(
    @graphql.Args() args: DeleteClientesArgs
  ): Promise<Clientes | null> {
    try {
      return await this.service.deleteClientes(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
