/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClientesService } from "../clientes.service";
import { ClientesCreateInput } from "./ClientesCreateInput";
import { Clientes } from "./Clientes";
import { ClientesFindManyArgs } from "./ClientesFindManyArgs";
import { ClientesWhereUniqueInput } from "./ClientesWhereUniqueInput";
import { ClientesUpdateInput } from "./ClientesUpdateInput";
import { AgendamentosFindManyArgs } from "../../agendamentos/base/AgendamentosFindManyArgs";
import { Agendamentos } from "../../agendamentos/base/Agendamentos";
import { AgendamentosWhereUniqueInput } from "../../agendamentos/base/AgendamentosWhereUniqueInput";
import { TransacoesFindManyArgs } from "../../transacoes/base/TransacoesFindManyArgs";
import { Transacoes } from "../../transacoes/base/Transacoes";
import { TransacoesWhereUniqueInput } from "../../transacoes/base/TransacoesWhereUniqueInput";

export class ClientesControllerBase {
  constructor(protected readonly service: ClientesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Clientes })
  async createClientes(
    @common.Body() data: ClientesCreateInput
  ): Promise<Clientes> {
    return await this.service.createClientes({
      data: data,
      select: {
        createdAt: true,
        dataNascimento: true,
        email: true,
        id: true,
        nome: true,
        telefone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Clientes] })
  @ApiNestedQuery(ClientesFindManyArgs)
  async clientesItems(@common.Req() request: Request): Promise<Clientes[]> {
    const args = plainToClass(ClientesFindManyArgs, request.query);
    return this.service.clientesItems({
      ...args,
      select: {
        createdAt: true,
        dataNascimento: true,
        email: true,
        id: true,
        nome: true,
        telefone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Clientes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async clientes(
    @common.Param() params: ClientesWhereUniqueInput
  ): Promise<Clientes | null> {
    const result = await this.service.clientes({
      where: params,
      select: {
        createdAt: true,
        dataNascimento: true,
        email: true,
        id: true,
        nome: true,
        telefone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Clientes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClientes(
    @common.Param() params: ClientesWhereUniqueInput,
    @common.Body() data: ClientesUpdateInput
  ): Promise<Clientes | null> {
    try {
      return await this.service.updateClientes({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dataNascimento: true,
          email: true,
          id: true,
          nome: true,
          telefone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Clientes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClientes(
    @common.Param() params: ClientesWhereUniqueInput
  ): Promise<Clientes | null> {
    try {
      return await this.service.deleteClientes({
        where: params,
        select: {
          createdAt: true,
          dataNascimento: true,
          email: true,
          id: true,
          nome: true,
          telefone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/agendamentosItems")
  @ApiNestedQuery(AgendamentosFindManyArgs)
  async findAgendamentosItems(
    @common.Req() request: Request,
    @common.Param() params: ClientesWhereUniqueInput
  ): Promise<Agendamentos[]> {
    const query = plainToClass(AgendamentosFindManyArgs, request.query);
    const results = await this.service.findAgendamentosItems(params.id, {
      ...query,
      select: {
        cliente: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dataHora: true,
        duracao: true,
        id: true,

        servico: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/agendamentosItems")
  async connectAgendamentosItems(
    @common.Param() params: ClientesWhereUniqueInput,
    @common.Body() body: AgendamentosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agendamentosItems: {
        connect: body,
      },
    };
    await this.service.updateClientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/agendamentosItems")
  async updateAgendamentosItems(
    @common.Param() params: ClientesWhereUniqueInput,
    @common.Body() body: AgendamentosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agendamentosItems: {
        set: body,
      },
    };
    await this.service.updateClientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/agendamentosItems")
  async disconnectAgendamentosItems(
    @common.Param() params: ClientesWhereUniqueInput,
    @common.Body() body: AgendamentosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agendamentosItems: {
        disconnect: body,
      },
    };
    await this.service.updateClientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/transacoesItems")
  @ApiNestedQuery(TransacoesFindManyArgs)
  async findTransacoesItems(
    @common.Req() request: Request,
    @common.Param() params: ClientesWhereUniqueInput
  ): Promise<Transacoes[]> {
    const query = plainToClass(TransacoesFindManyArgs, request.query);
    const results = await this.service.findTransacoesItems(params.id, {
      ...query,
      select: {
        cliente: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dataHora: true,
        id: true,
        itemVendido: true,
        metodoPagamento: true,
        updatedAt: true,
        valor: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transacoesItems")
  async connectTransacoesItems(
    @common.Param() params: ClientesWhereUniqueInput,
    @common.Body() body: TransacoesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transacoesItems: {
        connect: body,
      },
    };
    await this.service.updateClientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transacoesItems")
  async updateTransacoesItems(
    @common.Param() params: ClientesWhereUniqueInput,
    @common.Body() body: TransacoesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transacoesItems: {
        set: body,
      },
    };
    await this.service.updateClientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transacoesItems")
  async disconnectTransacoesItems(
    @common.Param() params: ClientesWhereUniqueInput,
    @common.Body() body: TransacoesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transacoesItems: {
        disconnect: body,
      },
    };
    await this.service.updateClientes({
      where: params,
      data,
      select: { id: true },
    });
  }
}
