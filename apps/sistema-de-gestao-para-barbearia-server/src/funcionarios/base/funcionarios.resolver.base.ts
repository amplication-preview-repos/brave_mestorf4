/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Funcionarios } from "./Funcionarios";
import { FuncionariosCountArgs } from "./FuncionariosCountArgs";
import { FuncionariosFindManyArgs } from "./FuncionariosFindManyArgs";
import { FuncionariosFindUniqueArgs } from "./FuncionariosFindUniqueArgs";
import { CreateFuncionariosArgs } from "./CreateFuncionariosArgs";
import { UpdateFuncionariosArgs } from "./UpdateFuncionariosArgs";
import { DeleteFuncionariosArgs } from "./DeleteFuncionariosArgs";
import { AcessosFindManyArgs } from "../../acessos/base/AcessosFindManyArgs";
import { Acessos } from "../../acessos/base/Acessos";
import { FuncionariosService } from "../funcionarios.service";
@graphql.Resolver(() => Funcionarios)
export class FuncionariosResolverBase {
  constructor(protected readonly service: FuncionariosService) {}

  async _funcionariosItemsMeta(
    @graphql.Args() args: FuncionariosCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Funcionarios])
  async funcionariosItems(
    @graphql.Args() args: FuncionariosFindManyArgs
  ): Promise<Funcionarios[]> {
    return this.service.funcionariosItems(args);
  }

  @graphql.Query(() => Funcionarios, { nullable: true })
  async funcionarios(
    @graphql.Args() args: FuncionariosFindUniqueArgs
  ): Promise<Funcionarios | null> {
    const result = await this.service.funcionarios(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Funcionarios)
  async createFuncionarios(
    @graphql.Args() args: CreateFuncionariosArgs
  ): Promise<Funcionarios> {
    return await this.service.createFuncionarios({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Funcionarios)
  async updateFuncionarios(
    @graphql.Args() args: UpdateFuncionariosArgs
  ): Promise<Funcionarios | null> {
    try {
      return await this.service.updateFuncionarios({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Funcionarios)
  async deleteFuncionarios(
    @graphql.Args() args: DeleteFuncionariosArgs
  ): Promise<Funcionarios | null> {
    try {
      return await this.service.deleteFuncionarios(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Acessos], { name: "acessosItems" })
  async findAcessosItems(
    @graphql.Parent() parent: Funcionarios,
    @graphql.Args() args: AcessosFindManyArgs
  ): Promise<Acessos[]> {
    const results = await this.service.findAcessosItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
