/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FuncionariosService } from "../funcionarios.service";
import { FuncionariosCreateInput } from "./FuncionariosCreateInput";
import { Funcionarios } from "./Funcionarios";
import { FuncionariosFindManyArgs } from "./FuncionariosFindManyArgs";
import { FuncionariosWhereUniqueInput } from "./FuncionariosWhereUniqueInput";
import { FuncionariosUpdateInput } from "./FuncionariosUpdateInput";

export class FuncionariosControllerBase {
  constructor(protected readonly service: FuncionariosService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Funcionarios })
  async createFuncionarios(
    @common.Body() data: FuncionariosCreateInput
  ): Promise<Funcionarios> {
    return await this.service.createFuncionarios({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Funcionarios] })
  @ApiNestedQuery(FuncionariosFindManyArgs)
  async funcionariosItems(
    @common.Req() request: Request
  ): Promise<Funcionarios[]> {
    const args = plainToClass(FuncionariosFindManyArgs, request.query);
    return this.service.funcionariosItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Funcionarios })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async funcionarios(
    @common.Param() params: FuncionariosWhereUniqueInput
  ): Promise<Funcionarios | null> {
    const result = await this.service.funcionarios({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Funcionarios })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFuncionarios(
    @common.Param() params: FuncionariosWhereUniqueInput,
    @common.Body() data: FuncionariosUpdateInput
  ): Promise<Funcionarios | null> {
    try {
      return await this.service.updateFuncionarios({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Funcionarios })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFuncionarios(
    @common.Param() params: FuncionariosWhereUniqueInput
  ): Promise<Funcionarios | null> {
    try {
      return await this.service.deleteFuncionarios({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
