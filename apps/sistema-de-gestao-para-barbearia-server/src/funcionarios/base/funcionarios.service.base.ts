/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Funcionarios as PrismaFuncionarios,
  Acessos as PrismaAcessos,
} from "@prisma/client";

export class FuncionariosServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FuncionariosCountArgs, "select">
  ): Promise<number> {
    return this.prisma.funcionarios.count(args);
  }

  async funcionariosItems(
    args: Prisma.FuncionariosFindManyArgs
  ): Promise<PrismaFuncionarios[]> {
    return this.prisma.funcionarios.findMany(args);
  }
  async funcionarios(
    args: Prisma.FuncionariosFindUniqueArgs
  ): Promise<PrismaFuncionarios | null> {
    return this.prisma.funcionarios.findUnique(args);
  }
  async createFuncionarios(
    args: Prisma.FuncionariosCreateArgs
  ): Promise<PrismaFuncionarios> {
    return this.prisma.funcionarios.create(args);
  }
  async updateFuncionarios(
    args: Prisma.FuncionariosUpdateArgs
  ): Promise<PrismaFuncionarios> {
    return this.prisma.funcionarios.update(args);
  }
  async deleteFuncionarios(
    args: Prisma.FuncionariosDeleteArgs
  ): Promise<PrismaFuncionarios> {
    return this.prisma.funcionarios.delete(args);
  }

  async findAcessosItems(
    parentId: string,
    args: Prisma.AcessosFindManyArgs
  ): Promise<PrismaAcessos[]> {
    return this.prisma.funcionarios
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .acessosItems(args);
  }
}
